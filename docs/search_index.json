[["index.html", "Introducción a las expresiones regulares Presentación", " Introducción a las expresiones regulares Wenceslao Arroyo-Machado @Wences91 18/02/2022 Presentación Imagen de @niko_4696 [4696] Este documento ha sido preparado para el curso Introducción a las expresiones regulares de la iniciativa #yosigopublicando. El objetivo del curso es ofrecer una introducción a las expresiones regulares, por lo que el contenido gira en torno a los aspectos básicos y de aplicación común en la diferentes herramientas que las integran. Existen diferentes recursos de apoyo con los que profundizar en las expresiones regulares, a destacar el tutorial de Chodnicki (2019) y el libro de Fitzgerald (2012). Este trabajo cuenta con una licencia Creative Commons Atribución 4.0 Internacional. El código está disponible en GitHub. Referencias "],["introducción.html", "1 Introducción 1.1 La búsqueda literal 1.2 Los reemplazos 1.3 ¿Qué son las expresiones regulares?", " 1 Introducción Para la parte introductoria se va a emplear como ejemplo un listado de URLs. 1.1 La búsqueda literal Por defecto, al realizar una búsqueda sin expresiones regulares, los términos buscados son cotejados de forma literal. Por ejemplo, al buscar la palabra google localizamos todas las URLs que incluyen en alguna parte ese término, sin importar la posición, elementos que hay antes o después… URL books.google.com/?id=jhkypjgchecc books.google.com/?id=zaoaaaaayaaj books.google.com/?id=y1cndwaaqbaj books.google.bg/books?id=e4pjaaaamaaj jubileebooks.co.uk/jubilee/magazine/authors/deborah_ellis/profile.asp io9.com/the-book-of-strange-new-things-will-blow-you-away-1675147919 Aunque en muchas ocasiones los sistemas de búsqueda no distinguen entre mayúsculas y minúsculas (case sensitive), pudiendo indicarse que exista esta distinción, no se puede descuidarse este aspecto. Si fijamos que el sistema diferencie entre mayúsculas y minúsculas y en lugar de buscar book buscamos BOOK los resultados serán diferentes. URL BOOKS.GOOGLE.COM 1.2 Los reemplazos Además de las búsquedas, son posibles los reemplazos. Se trata de establecer un término de búsqueda y otro de reemplazo para que automáticamente la herramienta sustituya la primera cadena de texto por la segunda. Podemos así cambiar BOOKS por books. URL books.GOOGLE.COM Es también habitual dejar el campo de reemplazo vacío para que los términos buscados sean sustituidos por una cadena vacía, lo que equivale a eliminar el texto que coincida con la búsqueda. Sería así posible buscar http://www. y remplazarlo por una cadena de texto vacía para eliminar esa parte de la URL. URL bbc.com/sport/0/football/29047046 star-ch.jp/channel/detail.php?movie_id=28489 govtrack.us/congress/votes/92-1972/s908 tyndalesploughboy.org/category/reformers portal.historicenvironment.scot/designation/lb46182 dutchcharts.nl/showitem.asp?cat=a&amp;interpret=fugees&amp;titel=the+score 1.3 ¿Qué son las expresiones regulares? Una expresión regular (también conocida como regex) es una secuencia de caracteres que conforma un patrón de búsqueda cuya principal funcionalidad se encuentra en las operaciones de búsqueda y sustitución (“Expresión Regular” 2021). Estas son de gran utilidad ya que pueden usarse en multitud de herramientas, desde las hojas de cálculo de Google Drive (Figura 1.1) a editores de código o en programación. Este método no debe confundirse con un lenguaje de programación si bien muchos de ellos ofrecen soporte para su uso. Fig. 1.1: Búsqueda de expresiones regulares en las hojas de cálculo de Google Drive Aunque no todas ellas pueden aplicarse en todas las herramientas que permiten su uso y pueden existir diferencias en la sintaxis, de manera general los aspectos básicos son comunes. De igual manera, no hay una solución única y perfecta, siendo posible obtener el mismo resultado a través de diferentes expresiones. Las expresiones regulares son de utilidad para todo tipo de investigación en la que se trabaje con datos que contengan texto: Tareas avanzadas de búsqueda y reemplazo Verificar la estructura de textos Dividir o estructurar textos Como muestra de estas aplicaciones, podemos en el caso de las URLs llevar a cabo una limpieza de las mismas reduciéndolas todas ellas al dominio. Para ello simplemente (después verás que, efectivamente, es sencillo) solo hay que indicar que busque la expresión regular /.* y la remplace por una cadena de texto vacía. URL bbc.com star-ch.jp govtrack.us tyndalesploughboy.org portal.historicenvironment.scot dutchcharts.nl Referencias "],["elementos-básicos.html", "2 Elementos básicos 2.1 . 2.2 \\ 2.3 \\d y \\D 2.4 \\w y \\W 2.5 [] 2.6 |", " 2 Elementos básicos Dentro de las expresiones regulares existen varios caracteres especiales que permiten por ejemplo indicar que lo que se busca es un carácter alfanumérico o una secuencia de números, entre otras posibilidades. 2.1 . El punto . es uno de los caracteres fundamentales de las expresiones regulares. Es representa la presencia de un carácter de cualquier tipo. No tiene que ser ni siquiera alfanumérico. De esta forma, al buscar book. se localizan tanto las URLs que incluyen bookscomo book/. URL books.google.com/?id=jhkypjgchecc books.google.com/?id=zaoaaaaayaaj books.google.com/?id=y1cndwaaqbaj books.google.bg/books?id=e4pjaaaamaaj jubileebooks.co.uk/jubilee/magazine/authors/deborah_ellis/profile.asp io9.com/the-book-of-strange-new-things-will-blow-you-away-1675147919 2.2 \\ No obstante, en caso de querer buscar literalmente el punto se necesita “escapar.” Mediante el uso de la barra invertida \\ podemos establecer la búsqueda literal de un carácter que tiene alguna funcionalidad especial dentro de las expresiones regulares como el punto o los paréntesis. En el caso de querer buscar literalmente book. habría que usar book\\.. URL facebook.com/groups/111795415601449 goldbook.iupac.org/s05962.html nfl.com/liveupdate/gamecenter/28849/nyg_gamebook.pdf nytimes.com/2011/02/03/books/03book.html greybook.cern.ch/greybook/experiment/detail?id=wa81 No confundir este uso de la barra invertida como método de escape con su uso para establecer clases de caracteres como las que se explican a continuación. 2.3 \\d y \\D Mediante \\d se establece la búsqueda de un dígito. De esta forma no necesitas indicar un número exacto, solo que un número ha de estar presente. Por ejemplo, sabiendo que en la URL de la web del New York Times aparece el año de publicación, podemos buscar noticias publicadas entre 2010 y 2019 buscando nytimes.com/201\\d. URL nytimes.com/2019/05/07/opinion/data-privacy.html nytimes.com/2011/02/03/books/03book.html Con \\D el funcionamiento es justo el puesto, busca la no presencia de un digito. Esto no significa que busque solo letras. Usando el ejemplo anterior, podemos detectar si hay algún fallo en estar URLs buscando que detrás de la URL base de la página exista algo que no sea un digito con nytimes.com/\\D. URL nytimes.com/ 2006/02/24/sports/olympics/24skate.html nytimes.com/slideshow/2010/09/15/garden/0916emerson-slideshow.html 2.4 \\w y \\W Es posible buscar caracteres alfanuméricos de igual manera que antes usando \\w. Por ejemplo, ahora quiero obtener todas las URLs del New York Times que no vayan a la página principal usando www.nytimes.com/\\w. URL nytimes.com/2019/05/07/opinion/data-privacy.html nytimes.com/2011/02/03/books/03book.html nytimes.com/slideshow/2010/09/15/garden/0916emerson-slideshow.html Nuevamente, si lo ponemos en mayúscula con \\W su uso es el opuesto y busca la presencia de algo que no se de tipo alfanumérico. En este caso quiero probar a buscar en las URLs la presencia del texto viaf seguido de algo que no sea un dígito o letra con viaf\\W. URL viaf.org/viaf/72689661 worldcat.org/identities/viaf-260281158 viaf.org/viaf/8648888 viaf.org/viaf/24934751 viaf.org/viaf/21209763 viaf.org/viaf/128732352 2.5 [] De manera más precisa se pueden especificar que rango de caracteres estamos buscando haciendo uso de los corchetes []. Este representa un único elemento y en su interior se representan los diferentes valores que puede tomar. Retomando el primer ejemplo del New York Times, es posible determinar ese rango de año de manera mucho más precisa, reduciéndolo a 2011 y 2012 con nytimes.com/201[12]. En este caso no busca 12 sino que busca la presencia del 1 o del 2. URL nytimes.com/2011/02/03/books/03book.html Es posible todo tipo de combinaciones, incluyendo no solo caracteres alfanuméricos sino también de otro tipo. En el caso de la anterior búsqueda de viaf le podemos indicar que detrás de viaf aparezca - o / usando viaf[/-]. URL viaf.org/viaf/72689661 worldcat.org/identities/viaf-260281158 viaf.org/viaf/8648888 viaf.org/viaf/24934751 viaf.org/viaf/21209763 viaf.org/viaf/128732352 Si quisiéramos establecer con los rango la presencia de un valor numérico cualquiera no tenemos que escribir todos ellos, se puede emplear [0-9], al igual que ocurre con los caracteres alfabéticos [a-z]. Aunque en este último caso la búsqueda quedaría limitada a todos aquellos que aparezcan en minúscula, para buscar en mayúscula se usaría [A-Z] y si queremos tener en cuenta ambos [a-zA-Z]. De esta forma, si quisiéramos localizar las URLs que incluyen una mayúscula se puede emplear [A-Z]. URL BOOKS.GOOGLE.COM De manera opuesta, se pueden establecer las diferentes opciones a evitar con [^]. Por ejemplo, los artículos de New York Times que no son de 2010 ni de 2011 usando nytimes.com/201[^01]. URL nytimes.com/2019/05/07/opinion/data-privacy.html 2.6 | Es posible combinar dos o más expresiones regulares de manera lógica y como el operador booleano OR usando la barra vertical |. Por ejemplo, para localizar URLs que contengan .gov o .org se puede usar la expresión (\\.gov)|(\\.org). URL tyndalesploughboy.org/category/reformers wikidata.org/wiki/q6762899#p570 trs-new.jpl.nasa.gov/dspace/bitstream/2014/39501/1/05-0657.pdf geonames.usgs.gov/apex/f?p=gnispq:5:::no::p5_antar_id:5544 wikisky.org/?img_source=img_all&amp;object=3c+236&amp;zoom=14 pdxqcenter.org/hands-across-hawthorne "],["cuantificadores.html", "3 Cuantificadores 3.1 {} 3.2 ? 3.3 + 3.4 *", " 3 Cuantificadores Un elemento fundamental en las expresiones regulares, en especial para las tareas de reemplazo, está en los cuantificadores. Estos permiten marcar la posibilidad de que un carácter o expresión aparezca una o más veces. 3.1 {} Los corchetes pueden usarse para establecer el rango de veces que un carácter o expresión puede venir dado. En primer lugar se fija y el mínimo y tras ello, separado por una coma, el máximo. Si por ejemplo tenemos la palabra book queremos recuperar además el plural books es posible hacerlo indicando que la s puede no estar o estar solo una vez de esta forma book(s){0,1}. URL books.google.com/?id=jhkypjgchecc books.google.com/?id=zaoaaaaayaaj books.google.com/?id=y1cndwaaqbaj books.google.bg/books?id=e4pjaaaamaaj jubileebooks.co.uk/jubilee/magazine/authors/deborah_ellis/profile.asp io9.com/the-book-of-strange-new-things-will-blow-you-away-1675147919 Los paréntesis permiten establecer de manera más precisa que se trata de la s, pues aunque por defecto books{0,1} también devuelve el mismo resultado aquí, en otros casos podría llevar a resultados erróneos. 3.2 ? En relación con este ejemplo, una forma de indicar que un elemento puede estar presente una vez o ninguna es con ?. De esta forma, la búsqueda anterior podría realizarse de manera simplificada con book(s?) o books?. URL books.google.com/?id=jhkypjgchecc books.google.com/?id=zaoaaaaayaaj books.google.com/?id=y1cndwaaqbaj books.google.bg/books?id=e4pjaaaamaaj jubileebooks.co.uk/jubilee/magazine/authors/deborah_ellis/profile.asp io9.com/the-book-of-strange-new-things-will-blow-you-away-1675147919 3.3 + En el caso de que este carácter o expresión pueda aparecer como mínimo una vez o más se hace uso de {1,} o, de manera más simplificada, +. Gracias a ello podemos localizar y verificar cadenas de texto. Por ejemplo, podemos localizar en las URLs los números de control de la Library of Congress usando lccn-[a-z]+\\d+. URL worldcat.org/identities/lccn-no2009195364 worldcat.org/identities/lccn-n90609217 worldcat.org/identities/lccn-n92112063 worldcat.org/identities/lccn-nr95045397 worldcat.org/identities/lccn-n2007035186 worldcat.org/identities/lccn-n85044526 3.4 * El asterisco * funciona igual que +, pero va un paso más allá y en lugar de exigir que como mínimo aparezca una vez puede no estar presente. Es el equivalente a {0,}. Su uso con el . son de gran utilidad en las expresiones regulares, pues permiten establecer la presencia de cualquier carácter o secuencia de caracteres. Su utilidad se encuentra sobre todo con los reemplazos. Por ejemplo, con el caso anterior, podemos eliminar toda la URL y reducirla al número de control. Para ello solo hay que buscar .*lccn- y reemplazar por lccn-. URL lccn-no2009195364 lccn-n90609217 lccn-n92112063 lccn-nr95045397 lccn-n2007035186 lccn-n85044526 O incluso reducirla por completo al número reemplazando por una cadena de texto vacía. URL no2009195364 n90609217 n92112063 nr95045397 n2007035186 n85044526 "],["espacios-y-anclas.html", "4 Espacios y anclas 4.1 \\s 4.2 \\t 4.3 \\n 4.4 ^ y $", " 4 Espacios y anclas Los espacios, saltos de líneas y ubicación de las cadenas son otro de los elementos que pueden ser controlados y tenidos en cuenta a través de expresiones regulares. 4.1 \\s Si bien los espacios pueden ser buscados mediante un espacio en blanco, este puede ser indicado con \\s. URL api.semantic scholar.org/corpusid:84315311 city-data.com/ township/shamrock-holt-ne.html nytimes.com/ 2006/02/24/sports/olympics/24skate.html d-nb.info/gnd/ 4300784-3 ncb         i.nlm.nih.gov id.loc. gov/authorities/names/n90609243 Una operación común al respecto consiste en reemplazar los espacios en blanco consecutivos, para lo cual solo hay que buscar /s+ y reemplazar las coincidencias con una cadena de texto vacía. URL api.semanticscholar.org/corpusid:84315311 city-data.com/township/shamrock-holt-ne.html nytimes.com/2006/02/24/sports/olympics/24skate.html d-nb.info/gnd/4300784-3 ncbi.nlm.nih.gov id.loc.gov/authorities/names/n90609243 4.2 \\t Las tabulaciones pueden ser fácilmente identificadas con expresiones regulares usando \\t. A veces estas tabulaciones pueden ser confundidas con espacios en blanco. URL city-data.com/ township/shamrock-holt-ne.html En algunas ocasiones los datos pueden incluir por error tabulaciones que de misma manera que con los espacios pueden corregirse con \\t+. URL city-data.com/township/shamrock-holt-ne.html De forma inversa, se pueden insertar tabulaciones a modo de reemplazo, sustituyendo un carácter o conjunto de caracteres por ello. Por ejemplo, se pueden reemplazar las barras invertidas por tabulaciones buscando / y reemplazando por \\t. URL bbc.com sport 0 football 29047046 star-ch.jp channel detail.php?movie_id=28489 govtrack.us congress votes 92-1972 s908 tyndalesploughboy.org category reformers portal.historicenvironment.scot designation lb46182 dutchcharts.nl showitem.asp?cat=a&amp;interpret=fugees&amp;titel=the+score Pero no olvides que algunos ficheros pueden venir delimitados por estos caracteres, por lo que dichos cambios han de aplicarse con cuidado. 4.3 \\n Con los saltos de línea ocurre lo mismo que con los espacios y las tabulaciones. Son fácilmente localizables usando \\n y las aplicaciones y advertencias vistas en las tabulaciones son directamente trasladables aquí. URL api.semanticscholar.org/corpusid:84315311 Por un lado, es fácil solucionar problemas en los datos o mejorar su estructura, por ejemplo reemplazando saltos de líneas \\t por espacios \\s o cadenas de texto vacías. URL api.semanticsscholar.org/corpusid:84315311 O bien dividir cadenas de texto en líneas, por ejemplo reemplazando las barras invertidas \\ por saltos de línea \\n. URL bbc.comsport0football29047046 Nuevamente, ten cuidado al eliminar o crear líneas, sobre todo cuando apliques dichos cambios directamente sobre un fichero. 4.4 ^ y $ En relación con ello se encuentran las anclas, con las que se puede marcar el inicio y final de una línea, delimitando mejor las búsquedas y reemplazos. Algo que además puede ser de ayuda cuando se usa en combinación los saltos de línea. Con ^ se marca el inicio de la línea. En este caso podemos usarlo por ejemplo para buscar todas aquellas URLs que comiencen por book con ^book. URL books.google.com/?id=jhkypjgchecc books.google.com/?id=zaoaaaaayaaj books.google.com/?id=y1cndwaaqbaj books.google.bg/books?id=e4pjaaaamaaj books.google.com/?id=lpahrqaacaaj books.google.com/?id=aiqnaqaamaaj Por su parte, $ marca el final de la línea. Como ejemplo, podemos buscar todas las URLs que terminan en .com usando \\.com$ (recuerda que el punto es necesario escaparlo). URL shadowfist.com gemacademyaz.com fontanaheraldnews.com hudsongroup.com 72armycadets.com thaiembassylima.com "],["opciones-avanzadas-y-otras-aplicaciones.html", "5 Opciones avanzadas y otras aplicaciones 5.1 Lookarounds 5.2 Patrones de sustitución", " 5 Opciones avanzadas y otras aplicaciones Existen otras muchas posibilidades con las expresiones regulares, de entre ellas vamos a destacar algunas de las más relevantes. Por ello, en esta ocasión los datos sobre los que se van a aplicar son diferentes, usando ahora el primer capítulo de la novela Alice’s Adventures in Wonderland (Carroll 1865). 5.1 Lookarounds De manera más avanzada, existe la opción de marcar elementos situados delante o detrás de un determinado carácter o cadena de caracteres o, a la inversa, localizar lo que no está precedido o seguido de ello. Una de sus utilidades está en realizar operaciones de extracción o reemplazo muy especificas que de otro modo no serían posibles o más complejas. 5.1.1 (?=) Para localizar un elemento que precede a una expresión regular se puede usar el denominado positive lookahead con (?=). Por ejemplo, con '.*'(?=\\ssaid Alice) podemos seleccionar las frases que dice Alice y por medio de str_extract() extraer dichas frases. ## [1] &quot;&#39;which certainly was not here before,&#39;&quot; &quot;&#39;What a curious feeling!&#39;&quot; ## [3] &quot;&#39;for it might end, you know,&#39;&quot; &quot;&#39;Come, there’s no use in crying like that!&#39;&quot; ## [5] &quot;&#39;Well, I’ll eat it,&#39;&quot; 5.1.2 (?!) Existe una versión negativa denominada negative lookahead, con la que es posible localizar elementos que no vengan seguidos de un determinado patrón. Por ejemplo, con '.*'\\sthought(?!\\sAlice) se seleccionarían todas las citas textual seguidas de thought pero que tras ello no aparece el nombre de Alice. ## [1] &quot;&#39;and what is the use of a book,&#39; thought&quot; &quot;&#39;Well!&#39; thought&quot; 5.1.3 (?&lt;=) Además de positive lookahead se encuentra positive lookbehind. En este último, en lugar de marcar el patrón por la derecha de la cadena de texto que se quiere identificar se hace por la izquierda, permitiendo identificar elementos que están justo a continuación. Por ejemplo, con (?&lt;='\\ssaid\\s)\\w+ se busca el nombre del personaje que dice la cita. ## [1] &quot;Alice&quot; &quot;Alice&quot; &quot;Alice&quot; &quot;Alice&quot; &quot;Alice&quot; 5.1.4 (?&lt;!) En su versión negativa, negative lookbehind, permite con (?&lt;!) seleccionar elementos que no vienen precedidos por un determinado patrón. Por ejemplo, con (?&lt;!White\\s)Rabbit.* podemos seleccionar las frases sobre Rabbit cuando inmediatamente delante no tiene la palabra White. ## [1] &quot;Rabbit-Hole&quot; ## [2] &quot;Rabbit say to itself, &#39;Oh dear! Oh dear! I shall be late!&#39; (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually took a watch out of its waistcoat-pocket, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.&quot; ## [3] &quot;Rabbit was no longer to be seen: she found herself in a long, low hall, which was lit up by a row of lamps hanging from the roof.&quot; 5.2 Patrones de sustitución Existen patrones específicos en los reemplazos. Una vez realizada una búsqueda en la que se establezcan varios conjuntos mediante el uso de los paréntesis (), mediante $ se puede reemplazar la cadena con uno de los conjuntos. Resulta de utilidad para cambiar el orden en cadenas de caracteres. Por ejemplo, buscando (White\\s)(Rabbit\\s) y remplazando por $2$1 lo que conseguimos es sustituir White Rabbit por Rabbit White. ## [1] &quot;So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a Rabbit White with pink eyes ran close by her.&quot; ## [2] &quot;Alice was not a bit hurt, and she jumped up on to her feet in a moment: she looked up, but it was all dark overhead; before her was another long passage, and the Rabbit White was still in sight, hurrying down it.&quot; Referencias "],["referencias.html", "Referencias", " Referencias "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
